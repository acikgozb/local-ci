pipeline {
    agent {
        label "default"
    }

    options {
        skipDefaultCheckout()
    }

    triggers {
        pollSCM('')
    }

    environment {
        TIMEOUT="sleep 900"
        BUILD_IMAGE="docker.io/library/golang:1.22.3"
        CONTAINER_NAME="${WORKSPACE.split("/")[-1]}-${BUILD_NUMBER}"
        EXEC="podman exec -it ${CONTAINER_NAME}"
    }

    stages {
        stage('Clean workspace') {
            steps {
                print('Cleaning previous build artifacts...')
                sh 'rm -rf ${WORKSPACE}/repo' 
                print('Removing previously failed build containers...')
                sh 'podman stop --all | xargs podman rm'
                print('The workspace is cleaned up successfully.')
            }
        }

        stage('Dump environment variables') {
            steps {
                print("Dumping environment variables...")
                sh '''
                set +x; for i in {WORKSPACE,BUILD_TAG,BUILD_NUMBER,BUILD_ID,BUILD_URL,NODE_NAME,JOB_NAME,JENKINS_URL,GIT_COMMIT,GIT_BRANCH}; do \
                    printf "%s:\t%s\n" \$i \${!i}; \
                done | column -t; set -x
                '''
            }
        }

        stage('Checkout') {
            steps {
                print("Starting checkout...")
                sh 'cp -r /home/jenkins/agent/repo ${WORKSPACE}/repo'
                sh 'if [ ! -d ${WORKSPACE}/repo ]; then exit 1; fi'
                print("Checkout is successful.")
            }
        }

        stage('Start build container') {
            steps {
                print("Starting the build container ${CONTAINER_NAME} with the image ${BUILD_IMAGE}...")
                sh 'podman run -d --name ${CONTAINER_NAME} -w /ci -v ${WORKSPACE}/repo:/ci $BUILD_IMAGE $TIMEOUT'
                sh 'if [ $(podman ps --filter "status=exited" --filter "status=unknown" --noheading | wc -l) -ne 0 ]; then exit 1; fi'
                print("The build container ${CONTAINER_NAME} is started successfully.")
            }
        }

        stage('Run lint rules') {
            steps {
                print("Checking lint rules...")
                sh '$EXEC make lint'
                print("Lint rules are passed successfully.")
            }
        }

        stage('Run unit tests') {
            steps {
                print("Running unit tests...")
                sh '$EXEC make unit-test'
                print("Unit tests are passed successfully.")
            }
        }

    }
    
    post {
        always {
            print("Stopping build container ${CONTAINER_NAME}")
        }

        success {
            print("Removing build container ${CONTAINER_NAME}")
        }

        failure {
            print("The pipeline is failed. To inspect the results, you can exec into the build container ${CONTAINER_NAME}.")
        }
    }
}

def print(String cmd) {
    sh "set +x; echo "${cmd}"; set -x"
}
